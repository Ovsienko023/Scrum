openapi: 3.0.0
info:
  title: Scrum API
  description: "Scrum API doc"
  version: 0.1.0

tags:
  - name: Boards
    description: "CRUD board operations"


paths:
  /oauth:
    post:
      tags:
        - Authorization
      summary: Login
      requestBody:
        $ref: "#/components/requestBodies/AuthorizationParams"
      responses:
        "200":
          $ref: "#/components/responses/AuthorizationResult"
#        400:
#          $ref: "../swagger/responses.yaml#/InputDataErrorResponse"
#        500:
#          $ref: "../swagger/responses.yaml#/DatabaseErrorResponse"

  /boards/{board_id}:
    get:
      tags:
        - Boards
      summary: Get board
      parameters:
        - $ref: "#/components/parameters/ParamsBoardId"
      responses:
        "200":
          $ref: "#/components/responses/GetBoardResult"
    patch:
      tags:
        - Boards
      summary: Update board
      parameters:
        - $ref: "#/components/parameters/ParamsBoardId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateBoardBody"
      responses:
        "204":
          $ref: "#/components/responses/EmptyOkResponse"
    delete:
      tags:
        - Boards
      summary: Delete board
      parameters:
        - $ref: "#/components/parameters/ParamsBoardId"
      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"

  /boards:
    get:
      tags:
        - Boards
      summary: Get board list
      responses:
        "200":
          $ref: "#/components/responses/GetBoardListResult"
    post:
      tags:
        - Boards
      summary: Create board
      requestBody:
        $ref: "#/components/requestBodies/CreateBoardBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedBoardResult"

components:
  parameters:
    ParamsBoardId:
      name: board_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/BoardId"

  requestBodies:
    # ------OAUTH------
    AuthorizationParams:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorizationBody'
      required: true
    # ------BOARD------
    CreateBoardBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateBoardBody"
      required: true

    UpdateBoardBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateBoardBody"
      required: true

  schemas:
    # ------OAUTH------
    Login:
      type: string
      description: "User login"
      nullable: false
      example: "admin"

    Password:
      type: string
      description: "User password"
      nullable: false
      example: "admin"

    Token:
      type: string
      description: "jwt token"
      nullable: false
      example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleGFtcGxlIjoiand0X3Rva2VuIn0.MXPuwZMnFH7HBdLICjtT9tmAgVnSAPi3m45i6j6y7aA"

    AuthorizationBody:
      type: object
      properties:
        login:
          $ref: '#/components/schemas/Login'
        password:
          $ref: '#/components/schemas/Password'
      required:
        - username
        - password

    # ------BOARD------
    BoardId:
      type: string
      format: uuid
      description: ""
      example: "c70c3dd8-ead1-43b7-8ee6-1c9fc4c3233f"

    BoardTitle:
      type: string
      description: ""
      example: "Board display name"

    BoardCreatorId:
      type: string
      format: uuid
      description: ""
      example: "c90c3dd8-ead1-43b7-8ee6-1c9fc4c3233f"

    BoardCreatedAt:
      type: integer
      description: ""
      nullable: false
      example: 1577836800

    Board:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/BoardTitle"
        creator_id:
          $ref: "#/components/schemas/BoardCreatorId"
        created_at:
          $ref: "#/components/schemas/BoardCreatedAt"

    CreateBoardBody:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/BoardTitle"

    UpdateBoardBody:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/BoardTitle"

    count:
      type: integer
      minimum: 0
      description: "Количество сущностей"
      example: 1

    BoardsAll:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/BoardId"
        title:
          $ref: "#/components/schemas/BoardTitle"
        creator_id:
          $ref: "#/components/schemas/BoardCreatorId"
        created_at:
          $ref: "#/components/schemas/BoardCreatedAt"


  responses:
    # ------OAUTH------
    AuthorizationResult:
      description: "Authorization Token"
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                $ref: '#/components/schemas/Token'
    # ------BOARD------
    GetBoardResult:
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: "#/components/schemas/Board"

    GetBoardListResult:
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                $ref: '#/components/schemas/count'
              boards:
                type: array
                items:
                  $ref: '#/components/schemas/BoardsAll'

    CreatedBoardResult:
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/BoardId"
              created_at:
                $ref: "#/components/schemas/BoardCreatedAt"

    # ------ERRORS------
    EmptyOkResponse:
      description: Accepted
      content: {}

x-tagGroups:
  - name: Main
    tags:
      - Authorization
      - Boards